package com.runner.planets;

import java.util.ArrayList;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.scenes.scene2d.Actor;
import com.runner.planets.objects.GameObject;
import com.runner.planets.objects.Runner;
import com.runner.planets.objects.buttons.ExitButton;
import com.runner.planets.objects.buttons.JumpButton;
import com.runner.planets.objects.buttons.MenuButton;
import com.runner.planets.objects.buttons.PauseButton;
import com.runner.planets.objects.buttons.ResumeButton;
import com.runner.screens.AbstractScreen;

public class PlanetLvl extends BasePlanet{
	private Runner runner;
	private PauseButton pauseButton;
	private JumpButton jumpButton;
	private ExitButton exitButton;
	private ResumeButton resumeButton;
	private MenuButton menuButton;
	private final Actor backMenu;
	private final Actor pauseImage;
	protected ArrayList<GameObject> list = new ArrayList<GameObject>();
	protected ArrayList<GameObject> pleaseDelete = new ArrayList<GameObject>();
	protected int pts;
	protected int hp;
	protected int ini = 0;
	
	protected PlanetManager mapManager;
	protected int gameS = 1; //1 = Main Game, 2 = Game Finished Screen, 3 = Game Over Screen, 4 = Pause Screen, 5 = Return to Planets Screen

	public PlanetLvl(){
		runner = new Runner(0,70);
		pauseButton = new PauseButton((AbstractScreen.VIEWPORT_WIDTH/2) - 90 , AbstractScreen.VIEWPORT_HEIGHT - 90);
		resumeButton = new ResumeButton(runner.getHitBox().x - 200, AbstractScreen.VIEWPORT_HEIGHT/2 - 35);
		menuButton = new MenuButton(runner.getHitBox().x - 100, AbstractScreen.VIEWPORT_HEIGHT/2 - 105);
		exitButton = new ExitButton(runner.getHitBox().x - 100, AbstractScreen.VIEWPORT_HEIGHT/2 - 175);
		backMenu = new Actor();
		pauseImage = new Actor();
		jumpButton = new JumpButton(10,10);
		mapManager = new PlanetManager(this);
		isGameFinished = false;
		pts = 0;
		hp = 3;
	}
	
	public void render(){
		switch(this.gameS){
		case 1:
			this.mainGame();
			break;
		case 2:
			this.listener.setPts(pts);
			this.finished();
			break;
		case 3: 
			this.gameOver();
			break;
		case 4:
			this.pauseGame();
			break;
		case 5:
			this.menu();
			break;
		}
	}
	
	private void mainGame(){
		batch.setProjectionMatrix(camera.combined);
		batch.begin();
		for(GameObject t : list){
			t.draw(batch, atlas);
		}
		runner.draw(batch, atlas);
		pauseButton.draw(batch, atlas);
		jumpButton.draw(batch, atlas);
		
		this.showScore();
		this.showHP();
		batch.end();
		
		runner.update(Gdx.graphics.getDeltaTime());
		pauseButton.setHitBoxPosition(runner.getHitBox().x + (AbstractScreen.VIEWPORT_WIDTH/2) - 90);
		jumpButton.setHitBoxPosition(runner.getHitBox().x - (AbstractScreen.VIEWPORT_WIDTH/2) + 10);
		
		Rectangle temp = new Rectangle(0,0,AbstractScreen.VIEWPORT_WIDTH,70);
		if (runner.hits(temp) != -1) {
			runner.action(1, 0, 70);
		}
		
		mapManager.touchSomething();
		mapManager.coinCollected();
		
		if(isGameFinished){
			this.gameS = 2;
		}
		
		mapManager.updateCamera();
		mapManager.keysControllers(false);
		mapManager.touchControllers(false);
	}
	
	private void pauseGame(){
		batch.setProjectionMatrix(camera.combined);
		batch.begin();
		for(GameObject t : list){
			t.draw(batch, atlas);
		}
		runner.setPause(true);
		runner.draw(batch, atlas);
		pauseButton.draw(batch, atlas);
		jumpButton.draw(batch, atlas);
		
		batch.draw(atlas.findRegion("backMenu"), runner.getHitBox().x - 250, AbstractScreen.VIEWPORT_HEIGHT/2 - 185);
		batch.draw(atlas.findRegion("pausa"), runner.getHitBox().x - 150, AbstractScreen.VIEWPORT_HEIGHT/2 + 70);
		
		resumeButton.draw(batch, atlas);
		menuButton.draw(batch, atlas);
		exitButton.draw(batch, atlas);
		
		this.showScore();
		this.showHP();
		batch.end();
		
		resumeButton.setHitBoxPosition(runner.getHitBox().x - 200);
		menuButton.setHitBoxPosition(runner.getHitBox().x - 100);
		exitButton.setHitBoxPosition(runner.getHitBox().x - 100);
		
//		mapManager.keysControllers(true);
		for(int i = 0; i <5 ; i++){
			if(Gdx.input.isTouched(i)){
				Vector3 touchPos = new Vector3(Gdx.input.getX(i), Gdx.input.getY(i), 0);
				camera.unproject(touchPos);
				Rectangle touch = new Rectangle(touchPos.x - 20, touchPos.y - 20, 40, 40);
				
				if(touch.overlaps(getRectangleResumeButton())){
					runner.setPause(false);
					this.gameS = 1;
				}
				
				if(touch.overlaps(getRectangleMenuButton())){
					this.gameS = 5;
				}
				
				if(touch.overlaps(getRectangleExitButton())){
					Gdx.app.exit();
				}
			}
		}
		
	}
	
	private void showScore(){
		font.draw(batch, "PTS: " + Integer.toString(pts), camera.position.x - (AbstractScreen.VIEWPORT_WIDTH/2) + 20, AbstractScreen.VIEWPORT_HEIGHT-25);
	}
	
	private void showHP(){
		font.draw(batch, "HP: " + Integer.toString(hp), camera.position.x - (AbstractScreen.VIEWPORT_WIDTH/2) + 200, AbstractScreen.VIEWPORT_HEIGHT-25);
	}
	
	public Runner getRunner() {
		return runner;
	}
	
	public ArrayList<GameObject> getList() {
		return list;
	}

	public ArrayList<GameObject> getPleaseDelete() {
		return pleaseDelete;
	}

	public int getPts() {
		return pts;
	}

	public void setPts(int pts) {
		this.pts = pts;
	}

	public int getHp() {
		return hp;
	}
	
	public Rectangle getRectanglePauseButton(){
		return this.pauseButton.getHitBox();
	}

	public Rectangle getRectangleJumpButton() {
		return this.jumpButton.getHitBox();
	}
	
	public Rectangle getRectangleResumeButton(){
		return this.resumeButton.getHitBox();
	}
	
	public Rectangle getRectangleMenuButton(){
		return this.menuButton.getHitBox();
	}
	
	public Rectangle getRectangleExitButton(){
		return this.exitButton.getHitBox();
	}

	public void setHp(int hp) {
		this.hp = hp;
	}

	public void setGameS(int gameS) {
		this.gameS = gameS;
	}
	
	public void setMap(String DATA_FILE){
		mapManager.setMap(DATA_FILE);
	}
}
