package com.runner.planets;

import java.util.StringTokenizer;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input;
import com.badlogic.gdx.files.FileHandle;
import com.runner.planets.objects.Coin;
import com.runner.planets.objects.Flag;
import com.runner.planets.objects.GameObject;
import com.runner.planets.objects.Plank;
import com.runner.planets.objects.danger.DangerGround;
import com.runner.planets.objects.danger.Spikes;
import com.runner.planets.objects.ornaments.Ground;
import com.runner.planets.objects.ornaments.Plant;

public class MapManager {
	private PlanetLvl planetLvl;
	
	public MapManager(PlanetLvl planetLvl){
		this.planetLvl = planetLvl;
	}
	
	public void setMap(String DATA_FILE){
		FileHandle file = Gdx.files.internal(DATA_FILE);
		StringTokenizer tokens = new StringTokenizer(file.readString());
		while(tokens.hasMoreTokens()){
			String type = tokens.nextToken();
			if(type.equals("ground")){
				planetLvl.list.add(new Ground(Integer.parseInt(tokens.nextToken()), 
						Integer.parseInt(tokens.nextToken()), 
						Integer.parseInt(tokens.nextToken())));
			}else if(type.equals("spikes")){
				planetLvl.list.add(new Spikes(Integer.parseInt(tokens.nextToken()), 
						Integer.parseInt(tokens.nextToken())));
			}else if(type.equals("dangerGround")){
				planetLvl.list.add(new DangerGround(Integer.parseInt(tokens.nextToken()), 
						Integer.parseInt(tokens.nextToken()), 
						Integer.parseInt(tokens.nextToken())));
			}else if(type.equals("coin")){
				planetLvl.list.add(new Coin(Integer.parseInt(tokens.nextToken()), 
						Integer.parseInt(tokens.nextToken()), 
						Integer.parseInt(tokens.nextToken())));
			}else if(type.equals("plank")){
				planetLvl.list.add(new Plank(Integer.parseInt(tokens.nextToken()), 
						Integer.parseInt(tokens.nextToken())));
			}else if(type.equals("plant")){
				planetLvl.list.add(new Plant(Integer.parseInt(tokens.nextToken()), 
						Integer.parseInt(tokens.nextToken()), 
						Integer.parseInt(tokens.nextToken())));
			}else if(type.equals("flag")){
				planetLvl.list.add(new Flag(Integer.parseInt(tokens.nextToken()), 
						Integer.parseInt(tokens.nextToken())));
			}
		}
	}
	public void touchSomething(){
		for(GameObject t : planetLvl.list){
			switch(planetLvl.runner.hits(t.getHitBox())){
			case 1:
				bottomTouchSomething(t);
				break;
			case 3:
				rightTouchSomething(t);
				break;
			case 4:
				topTouchSomething(t);
				break;
			}
		}
	}
	public void updateCamera(){
		planetLvl.camera.position.x = planetLvl.runner.getHitBox().x;
		planetLvl.camera.update();
	}
	public void coinCollected(){
		while(!planetLvl.pleaseDelete.isEmpty()){
			planetLvl.list.remove(planetLvl.pleaseDelete.get(0));
			Coin coin = (Coin) planetLvl.pleaseDelete.get(0);
			planetLvl.pleaseDelete.remove(0);
			planetLvl.pts += coin.getPoints();
		}
	}
	public void controles(){
		planetLvl.runner.moveRight(Gdx.graphics.getDeltaTime());
		if (Gdx.input.isKeyPressed(Input.Keys.SPACE) || Gdx.input.isTouched()) {
			planetLvl.listener.playSoundJump();
			planetLvl.runner.jump();
		}
	}
	private void bottomTouchSomething(GameObject t){
		switch(t.hitAction(1)){
		case 1:
			planetLvl.runner.action(1, 0, t.getHitBox().y + t.getHitBox().height);
			break;
		case 2:
			planetLvl.listener.playSoundHit();
			planetLvl.vidas--;
			if(planetLvl.vidas==0)
				planetLvl.gameS = 3;
			planetLvl.runner.reastart(0, 100);
			break;
		case 3:
			planetLvl.listener.playSoundCoin();
			planetLvl.pleaseDelete.add(t);
			break;
		case 4:
			planetLvl.isGameFinished = true;
			break;
		}
	}
	private void rightTouchSomething(GameObject t){
		switch(t.hitAction(3)){
		case 1:
			planetLvl.runner.action(3, t.getHitBox().x - planetLvl.runner.getHitBox().width - 1, 0);
			break;
		case 2:
			planetLvl.listener.playSoundHit();
			planetLvl.vidas--;
			if(planetLvl.vidas==0)
				planetLvl.gameS = 3;
			planetLvl.runner.reastart(0, 100);
			break;
		case 3:
			planetLvl.listener.playSoundCoin();
			planetLvl.pleaseDelete.add(t);
			break;
		case 4:
			planetLvl.isGameFinished = true;
			break;
		}
	}
	private void topTouchSomething(GameObject t){
		switch(t.hitAction(4)){
		case 1:
			planetLvl.runner.action(4, 0, t.getHitBox().y - planetLvl.runner.getHitBox().height);
			break;
		case 2:
			planetLvl.listener.playSoundHit();
			planetLvl.vidas--;
			if(planetLvl.vidas==0)
				planetLvl.gameS = 3;
			planetLvl.runner.reastart(0, 100);
			break;
		case 3:
			planetLvl.listener.playSoundCoin();
			planetLvl.pleaseDelete.add(t);
			break;
		case 4:
			planetLvl.isGameFinished = true;
			break;
		}
	}
}
